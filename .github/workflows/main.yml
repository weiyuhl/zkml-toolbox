name: PHP Quality Checks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1', '8.2']

    steps:
      # 1. Checkout 代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      # 3. 缓存 Composer 依赖
      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # 4. 安装工具并允许插件
      - name: Install Tools and Allow Plugins
        run: |
          composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer global require phpstan/phpstan
          composer global require dealerdirect/phpcodesniffer-composer-installer phpcompatibility/php-compatibility
          ~/.composer/vendor/bin/phpcs --config-set installed_paths ~/.composer/vendor/phpcompatibility/php-compatibility
          composer global require rector/rector

      # 5. 运行 PHPStan 检查并将结果保存到文件
      - name: Run PHPStan (Output to file)
        run: |
          ~/.composer/vendor/bin/phpstan analyse src/ > php-quality-issues.txt || true

      # 6. 运行 PHPCompatibility 检查并将结果保存到文件
      - name: Run PHPCompatibility (Output to file)
        run: |
          ~/.composer/vendor/bin/phpcs \
          --standard=PHPCompatibility \
          --runtime-set testVersion 7.4-8.2 \
          src/ >> php-quality-issues.txt || true

      # 7. 运行 Rector 检查并将结果保存到文件
      - name: Run Rector (Output to file)
        run: |
          ~/.composer/vendor/bin/rector process src/ --dry-run >> php-quality-issues.txt || true

      # 8. 提交检测问题到文件
      - name: Commit and Push php-quality-issues.txt
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main  # 拉取远程 main 分支的最新更改

          # 暂存所有未提交的更改
          git stash || echo "No changes to stash"

          # 拉取远程更改并合并
          git pull origin main --rebase

          # 恢复暂存的更改
          git stash pop || echo "No changes to apply"

          git add php-quality-issues.txt rector.php  # 确保 rector.php 被添加到版本控制
          git commit -m "Add PHP quality issues report"
          git push origin main  # 推送到远程 main 分支
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. 自动修复代码，但只在有修改时才提交
      - name: Apply Rector Fixes (Auto Fix)
        run: |
          # 使用 Rector 自动修复代码
          ~/.composer/vendor/bin/rector process src/ --apply || true

      # 10. 检查是否有更改，只有有修改时才提交
      - name: Check for Changes and Commit
        id: check-changes
        run: |
          # 检查是否有更改
          git diff --exit-code || (git add -A && git commit -m "Apply auto fixes" && git push --set-upstream origin fix/auto-repair)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 11. 创建 Pull Request（仅当有更改时）
      - name: Create Pull Request
        if: steps.check-changes.outputs.status == 'success'
        run: |
          gh pr create --title "Automated PHP Fixes" --body "This pull request includes automated PHP fixes applied by Rector" --base main --head fix/auto-repair
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}